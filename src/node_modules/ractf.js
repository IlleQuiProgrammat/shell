import React from "react";
import Loadable from "react-loadable";
import {
    APIContext, APIEndpoints, AppContext, WSContext
} from "../containers/controllers/Contexts";
import { Spinner, Page } from "@ractf/ui-kit";

export { ENDPOINTS } from "../containers/controllers/API";
export * from "../containers/controllers/UseAPI";

export const apiEndpoints = APIEndpoints;
export const apiContext = APIContext;
export const appContext = AppContext;
export const wsContext = WSContext;

import("zxcvbn").then(zx => window.__zxcvbn = zx.default);
export const zxcvbn = () => (window.__zxcvbn || null);

export let plugins = {
    categoryType: {},
    challengeMod: {},
    challengeType: {},
    challengeEditor: {},
    challengeMetadata: {},
    page: {},
    popup: {},
    medals: {},
    config: {},
    adminPage: {},
    loginProvider: {},
    registrationProvider: {},
    postLogin: {},
    errorHandler: {},
};

export const localConfig = (key, value, fallback) => {
    let config;
    if (typeof key === "undefined" && typeof value === "undefined") {
        try {
            config = JSON.parse(window.localStorage.getItem("pref"));
        } catch(e) {
            config = {};
        }
        return config || {};
    }
    if (typeof value === "undefined") {
        let value = localConfig()[key];
        if (typeof value === "undefined") return fallback;
        return value;
    }
    config = localConfig();
    config[key] = value;
    window.localStorage.setItem("pref", JSON.stringify(config));
};

export const dynamicLoad = (loader) => {
    return Loadable({
        loader: loader,
        loading: () => React.createElement(Page, {
            children: [React.createElement(Spinner)],
            vCentre: true,
        }),
    });
};

// Export the plugins object for debugging purposes.
window.__ractf_plugins = plugins;

export const registerPlugin = (type, key, handler) => {
    if (!plugins[type]) plugins[type] = {};
    plugins[type][key] = handler;
};

const _fastClick = e => {
    e.target && e.target.click && e.target.click();
    e.preventDefault();
    e.stopPropagation();
    return false;
};
export const fastClick = {
    onMouseDown: _fastClick,
    onTouchStart: _fastClick,
};
